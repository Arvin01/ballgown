summaryRprof("myFunction.out",memory="tseries")
system.time(ff <- rcppFstats(t(dat),mod,mod0))
system.time(ff <- rowFtests(dat,aa))
system.time(ff <- fstats(dat,mod,mod0))
library(genefilter)
system.time(ff <- rowFtests(dat,aa))
system.time(ff <- fstats(dat,mod,mod0))
system.time(ff <- rcppFstats(t(dat),mod,mod0))
system.time(ff <- rowFtests(dat,aa))
system.time(ff <- fstats(dat,mod,mod0))
library(RcppArmadillo)
library(inline)
library(genefilter)
code2 <- '
arma::mat datc = Rcpp::as<arma::mat>(dat);
arma::mat modc = Rcpp::as<arma::mat>(mod);
arma::mat mod0c = Rcpp::as<arma::mat>(mod0);
int n = datc.n_rows; int m = datc.n_cols;
int df = modc.n_cols; int df0 = mod0c.n_cols;
arma::vec fstats = arma::zeros<arma::vec>(m);
arma::vec res = arma::zeros<arma::vec>(n);
arma::vec res0 = arma::zeros<arma::vec>(n);
double ss,ss0;
for(int i=0; i < m; i++){
res = datc.col(i) - modc*arma::solve(modc,datc.col(i));
res0 = datc.col(i) - mod0c*arma::solve(mod0c,datc.col(i));
ss = arma::as_scalar( arma::trans(res)*res0);
ss0 = arma::as_scalar( arma::trans(res0)*res0);
fstats(i) = ((ss0 - ss)/(df-df0))/(ss/(n-df));
}
return Rcpp::wrap(fstats);
'
rcppFstats <- cxxfunction(signature(dat="numeric",mod="numeric",mod0="numeric"),
code2,plugin="RcppArmadillo",verbose=TRUE)
astorRepos <- "http://astor.som.jhmi.edu/~marchion/software/"
install.packages("switchBox", repos = astorRepos)
library(devtools)
install_github
github_pull_info
host <- "https://api.github.com"
path <- paste("repos", "jtleek","swfdr", "pulls", NULL, sep = "/")
path
host
r <- GET(host, path = path)
library(httr)
r <- GET(host, path = path)
r
stop_for_status(r)
X <- matrix(ncol=7,nrow=10)
X[,1] = c(93.8,77.9,98.10,91.10,95.10,67.60,97.00,98.30,75.40)
X <- matrix(ncol=7,nrow=9)
X[,1] = c(93.8,77.9,98.10,91.10,95.10,67.60,97.00,98.30,75.40)
X[,2] = c(95.83, 97.10,9740,90.30, 91.18, 75.00, 97.00,98.90,85.40)
X[,3] = c(100.00,82.35, 80.52, 58.06,62.75,73.86, 90.91,97.79,84.29)
X[,4] =c(98.61,82.35,97.40,82.26,91.18, 76.14,100.00,99.45,93.21)
X[,5] = c(97.22,82.35,85.71,85.48,91.18,79.55,100.00,99.45,79.29)
dim(X)
X <- X[,1:5]
X
colnames
colnames(X) <- c("TSP","kTSP","Naive Bayes","SVM", "PAM")
boxplot(X)
X[3,2] = 97.40
boxplot(X)
install.packages("ggplot2")
?qplot
library(ggplot2)
?qplot
qplot(X,geom="boxplto")
qplot(X,geom="boxplot")
?ggplot
?qplot
X
xvec <- as.vector(x)
boxplot(X)
boxplot(X,ylim=c(0,1))
boxplot(X,ylim=c(0,100))
boxplot(X,ylim=c(0,100))
mypar <- function(a=1,b=1,brewer.n=12,brewer.name="Paired",...){
par(mar=c(2.5,2.5,1.6,1.1),mgp=c(1.5,.5,0))
par(mfrow=c(a,b),...)
palette(brewer.pal(brewer.n,brewer.name))
}
mypar()
install.packages("RColorBrewer")
install.packages("RColorBrewer")
library(mypar)
library(RColorBrewer)
mypar <- function(a=1,b=1,brewer.n=12,brewer.name="Paired",...){
par(mar=c(2.5,2.5,1.6,1.1),mgp=c(1.5,.5,0))
par(mfrow=c(a,b),...)
palette(brewer.pal(brewer.n,brewer.name))
}
mypar()
boxplot(X,ylim=c(0,100),col=1:5)
mypar <- function(a=1,b=1,brewer.n=12,brewer.name="Dark2",...){
par(mar=c(2.5,2.5,1.6,1.1),mgp=c(1.5,.5,0))
par(mfrow=c(a,b),...)
palette(brewer.pal(brewer.n,brewer.name))
}
mypar()
mypar <- function(a=1,b=1,brewer.n=8,brewer.name="Dark2",...){
par(mar=c(2.5,2.5,1.6,1.1),mgp=c(1.5,.5,0))
par(mfrow=c(a,b),...)
palette(brewer.pal(brewer.n,brewer.name))
}
mypar()
boxplot(X,ylim=c(0,100),col=1:5)
pdf(file="~/Desktop/illusion.pdf")
boxplot(X,ylim=c(0,100),col=1:5,xlab="Accuracy")
dev.off()
pdf(file="~/Desktop/illusion.pdf")
boxplot(X,ylim=c(0,100),col=1:5,ylab="Accuracy")
dev.off()
pdf(file="~/Desktop/illusion.pdf")
boxplot(X,ylim=c(0,100),col=1:5,ylab="Accuracy",cex.lab=1.5,cex.axis=1.5)
dev.off()
pdf(file="~/Desktop/illusion.pdf",height=4.5,width=4.5)
boxplot(X,ylim=c(0,100),col=1:5,ylab="Accuracy",cex.lab=1.5,cex.axis=1.5)
dev.off()
?par
pdf(file="~/Desktop/illusion.pdf",height=9,width=9)
boxplot(X,ylim=c(0,100),col=1:5,ylab="Accuracy",cex.lab=1.5,cex.axis=1.5,las=3)
dev.off(
)
colnames(X)
colnames(X)[3] = "N. Bayes"
pdf(file="~/Desktop/illusion.pdf",height=9,width=9)
boxplot(X,ylim=c(0,100),col=1:5,ylab="Accuracy",cex.lab=1.5,cex.axis=1.5,las=3)
dev.off(
)
colnames(X)[3] = "N.B."
boxplot(X,ylim=c(0,100),col=1:5,ylab="Accuracy",cex.lab=1.5,cex.axis=1.5,las=3)
pdf(file="~/Desktop/illusion.pdf",height=9,width=9)
boxplot(X,ylim=c(0,100),col=1:5,ylab="Accuracy",cex.lab=1.5,cex.axis=1.5,las=3)
dev.off(
)
testfun <- function(x){x <- x-3; tmp <- readline('test '); return(tmp)}
testfun(3)
testfun <- function(x){x <- x-3; tmp <- readline('test '); tmp <- as.numeric(tmp) return(tmp)}
testfun <- function(x){x <- x-3; tmp <- readline('test '); tmp <- as.numeric(tmp); return(tmp)}
testfun(3)
getPheno <- function(object){
varNames <- names(pData(object))
cat("Is your analysis binary or survival?\nInput 1 if binary, 2 if survival.\n")
ans <- readline(prompt="test")
type <- eval(parse(text=ans))
#   for(i in seq(along=varNames)){
#     cat(paste(i,varNames[i],"\n"))
#   }
#
#
#   if(type==1){
#     cat("Please input the number corresponding to the binary outcome variable")
#     tmp <- as.numeric(readline(prompt="\n"))
#     mainPheno <- as.factor(pData(object)[,tmp])
#     phenoName <- names(pData(object))[tmp]
#   }
#   if(type==2){
#     cat("Please input the number corresponding to the survival time")
#     tmp <- as.numeric(readline(prompt="\n"))
#     time <- pData(object)[,tmp]
#     timeName <-
#
#     cat("Please input the number corresponding to the event indicator")
#     event <- pData(object)[,as.numeric(readline(prompt="\n"))]
#
#     mainPheno <- Surv(time,event)
#   }
#   return(mainPheno)
return(type)
}
getPheno(object)
getPheno <- function(object){
#varNames <- names(pData(object))
cat("Is your analysis binary or survival?\nInput 1 if binary, 2 if survival.\n")
ans <- readline(prompt="test")
type <- eval(parse(text=ans))
}
getPheno(object)
a <- y ~ x
a
names(a)
library(survival)
?Surv
with(lung, Surv(time, status))
tmp <- with(lung, Surv(time, status))
class(tmp)
outcome <- rep(c(1,2),each=)
outcome <- rep(c(1,2),each=5)
class(outcome)
install.packages('ktspair')
library(ktspair)
?kts.pair
grp <- rep(c(0,1),each=10)
dat <- matrix(rnorm(100*20),nrow=100)
kt <- kts.pair(dat,grp,3)
system.time(kt <- kts.pair(dat,grp,3))
kts.pair
kt
names(kt)
kt$accuracy
kt$accuracy_k
kt$sensitivity
?kts.pair
kts.pair
kt
dim9dat
dim(dat)
dat <- matrix(rnorm(1e3*20),ncol=20)
system.time(kt <- kts.pair(dat,grp,3))
dat <- matrix(rnorm(1e4*20),ncol=20)
system.time(kt <- kts.pair(dat,grp,3))
library(survhd)
library(survHD)
rowCoxTests
ss
tmp
tmp[,1]
tmp[,2]
rowCoxTests
?rowTtests
library(genefilter)
?rowTtests
?rowFtests
dim(dat)
system.time(rowFtests(dat,grp))
system.time(rowFtests(dat,as.factor(grp)))
system.time(rowFtests(dat,as.factor(grp)))*1e4
system.time(rowFtests(dat,as.factor(grp)))*1e4/60
system.time(rowCoxtests(dat,as.factor(grp)))*1e4/60
system.time(rowCoxTests(dat,as.factor(grp)))*1e4/60
system.time(rowCoxTests(dat,ss))*1e4/60
dim(ss)
tmp
tmp <- tmp[1:20]
tmp
system.time(rowCoxTests(dat,ss))*1e4/60
system.time(rowCoxTests(dat,tmp))*1e4/60
dim(dat)
dat <- cbind(dat,dat,dat,dat)
dim(dat)
dat <- cbind(dat,dat)
x <- matrix(rnorm(100*20),nrow=100)
comp <- x < x[,1]
comp[1,]
comp <- x < x[1,]
comp[1,]
comp <- x <= x[1,]
comp[1,]
comp <- t(t(x) <= x[1,])
comp[1,]
comp[2,]
plot(rowSums(comp))
system.time(rowSums(comp))
dat <- matrix(rnorm(1e4*20),nrow=1e4)
system.time(rowSums(comp))
system.time(comp <- t(t(x) <= x[1,]))
system.time(comp <- dat(t(x) <= dat[1,]))
system.time(comp <- t(t(dat) <= dat[1,]))
system.time(comp <- t(t(dat) <= dat[1,]); tmp <- rowSums(comp))
system.time(comp <- t(t(dat) <= dat[1,]))
dim(dat)
comp <- t(dat) <= dat[1,]
system.time(rowSums(comp))
ff <- function(dat){comp <- t(t(dat) <= dat[1,]); tmp <- rowSums(comp)}
system.time(ff(dat))
ff <- function(dat){comp <- t(t(dat) <= dat[1,]); tmp <- rowMeans(comp); comp <- comp[tmp > 0.5,]}
system.time(ff(dat))
system.time(ff(dat))*1e4
system.time(ff(dat))*1e4/60
comp <- t(t(dat) <= dat[1,]); tmp <- rowMeans(comp); comp <- comp[tmp > 0.5,]
dim(comp)
system.time(rowCoxTests(dat,as.factor(grp)))*1e4/60
?Sruv
?Surv
library(survival)
?Surv
library(survivalHD)
library(survHD)
with(lung, Surv(time, status))
tmp <- with(lung, Surv(time, status))
dim(dat)
dat <- cbind(dat,dat)
dat <- cbind(dat,dat)
dat <- cbind(dat,dat)
dim(dat)
tmp <- tmp[1:160]
system.time(rowCoxTests(dat,tmp))
dat <- rbind(dat,dat)
dat <- rbind(dat,dat)
dim(dat)
dat <- rbind(dat,dat)
dim(dat)
dat <- rbind(dat,dat)
dim9dat
dim(dat)
system.time(rowCoxTests(dat,tmp))
install_github("healthvis", username="hcorrada", subdir="pkg")
library(devtools)
install_github("healthvis", username="hcorrada", subdir="pkg")
?survivalVis
library(healthvis)
?survivalVis
install_github("healthvis", username="hcorrada", subdir="pkg")
library(survival)
# Set trt and prior as factors so they are treated as such
veteran$trt <- as.factor(veteran$trt)
veteran$prior <- as.factor(veteran$prior)
cobj <- coxph(Surv(time, status)~trt+age+celltype+prior, data=veteran)
survivalVis(cobj, data=veteran, plot.title="Veteran Survival Data", group="trt", group.names=c("Treatment", "No Treatment"), line.col=c("#E495A5","#39BEB1"))
library(survival)
# Set trt and prior as factors so they are treated as such
veteran$trt <- as.factor(veteran$trt)
veteran$prior <- as.factor(veteran$prior)
cobj <- coxph(Surv(time, status)~trt+age+celltype+prior, data=veteran)
survivalVis(cobj, data=veteran, plot.title="Veteran Survival Data", group="trt", group.names=c("Treatment", "No Treatment"), line.col=c("#E495A5","#39BEB1"))
args(survivalVis)
library(survival)
# Set trt and prior as factors so they are treated as such
veteran$trt <- as.factor(veteran$trt)
veteran$prior <- as.factor(veteran$prior)
cobj <- coxph(Surv(time, status)~trt+age+celltype+prior, data=veteran)
survivalVis(cobj, data=veteran, plot.title="Veteran Survival Data", group="trt", group.names=c("Treatment", "No Treatment"), line.col=c("#E495A5","#39BEB1"),gaeDevel="FALSE")
survivalVis(cobj, data=veteran, plot.title="Veteran Survival Data", group="trt", group.names=c("Treatment", "No Treatment"), line.col=c("#E495A5","#39BEB1"),gaeDevel=TRUE)
HVServer$new()
tmp <- survivalVis(cobj, data=veteran, plot.title="Veteran Survival Data", group="trt", group.names=c("Treatment", "No Treatment"), line.col=c("#E495A5","#39BEB1"))
tmp
survivalVis(cobj, data=veteran, plot.title="Veteran Survival Data", group="trt", group.names=c("Treatment", "No Treatment"), line.col=c("#E495A5","#39BEB1"))
require(inSilicoMerging)
require(GEOquery)
require(affy)
require(frma)
require(hthgu133afrmavecs)
require(hgu133plus2frmavecs)
require(AnnotationDbi)
require(affyio)
require(survHD) #install_bitbucket("survhd", "lwaldron",ref="default")
discMETA <- c("~/Desktop/ov-metadata-test1.csv")
discCEL <- c("~/Desktop/testcel1/")
## Determine the number of data sets
numDisc <- length(discMETA)
## Load the data sets - if more than one load as a list
if(numDisc > 1){
discMetaData <- vector("list",numDisc)
for(i in 1:numDisc){
discMetaData[[i]] <- read.csv(discMETA[i])
}
}else{
discMetaData <-read.csv(discMETA)
}
## Load the data sets - if more than one load as a list
if(numDisc > 1){
discExpr <- discFileNames <- vector("list",numDisc)
for(i in 1:numDisc){
discFileNames <- list.files(discCEL[i],full.names=TRUE)
discAffyBatch <- read.affybatch(filenames=discFileNames)
discExpr[[i]] <- frma(discAffyBatch, summarize="robust_weighted_average")
pData(discExpr[[i]]) <- cbind(data.frame(fullFilePath=discFileNames),pData(discExpr[[i]]))
}
}else{
discFileNames <- list.files(discCEL,full.names=TRUE)
discAffyBatch <- read.affybatch(filenames=discFileNames)
discExpr <- frma(discAffyBatch, summarize="robust_weighted_average")
pData(discExpr) <- cbind(data.frame(fullFilePath=discFileNames),pData(discExpr))
}
library(devtools)
?create
load("~/Desktop/.RData")
args(fsva)
library(fsva)
install.packages("fsva")
library(sva)
?fsva
tt <- function(x){ x <- 3}
save(tt,file="~/Desktop/tt.rda")
rm(tt)
load("~/Desktop/tt.rda")
tt
pairs
tsPairs
predict.coxphy
predict.coxph
?predict.coxph
library(survival)
?predict.coxph
library(healthvis)
?survivalVis
sessionInfo()
citation("inSilicoMerging")
citation("sva")
citation("frma")
citation("affy")
citation("knitr")
citation("survHD")
citation("healthvis")
?predict.coxph
library(Survival)
library(survival)
?Surv
ss <- Surv(runif(50),rbinom(50,size=1,prob=0.5))
grp <- rep(c(0,1),each=50)
cph1 <- coxph(ss ~ grp)
grp <- rep(c(0,1),each=25)
cph1 <- coxph(ss ~ grp)
plot(cph1)
plot(Surv(cph1))
plot(surv.fit(cph1))
?surv.fit
?survvit
?survfit
plot(survfit(cph1))
cph1
pp <- predict(cph1,ss)
pp
plot(pp,grp)
?predict.coxph
pp <- predict(cph1,ss,type="expected")
pp
?survfit
fix(pp)
library(healthvis)
?survivalVis
library(devtools)
args(install_bitbucket)
install_bitbucket("survhd","lwaldron")
args(install_bitbucket)
install_bitbucket(repo="survhd",user="lwaldron")
install_bitbucket(repo="survHD",user="lwaldron")
?install_bitbucket
install_bitbucket(repo="survhd",user="lwaldron")
install_bitbucket(repo="survhd",user="lwaldron",ref="default")
library(tspair)
library(tspreg)
data(tspdata)
tspdata[1,]
ls()
args(tspreg)
tspr1 <- tspreg(dat,grp,npair=10)
args(tspreg)
tspr1 <- tspreg(dat,as.factor(grp),npair=10)
tspr1
?calculateTspairs
predictors
predictors <- calculateTspairs(tspr1$index)
predictors <- calculateTspairs(tspr1$ind)
names(tspr1)
predictors <- calculateTspairs(dat,tspr1$index)
predictors
## Build a top-scoring pairs regression predictor
tspr1 <- tspreg(dat,as.factor(grp),npair=1)
# Shows the pairs of indices contributing to the predictor
tspr1$index
# Create the data frame for prediction
predictors <- calculateTspairs(dat,tspr1$index)
# Fit the linear model and predict
modelFit <- lm(grp ~ predictors)
names(predictors)
modelFit <- lm(grp ~ .,data=predictors$pairMat)
grp
modelFit <- lm(grp ~ .,data=predictors$pairMat)
modelFit <- lm(grp=="diseased" ~ .,data=predictors$pairMat)
modelFit
validationPredictors <- calculateTspairs(dat2,tspr1$index)
predict(modelFit,newdata=validationPredictors$pairMat)
predict(modelFit,newdata=validationPredictors$pairMat) > 0.5
table(predict(modelFit,newdata=validationPredictors$pairMat) > 0.5, grp2)
ls()
predict(modelFit,newdata=validationPredictors$pairMat) > 0.5
plot(predict(modelFit,newdata=validationPredictors$pairMat) > 0.5)
citation("tspreg")
library(affyio)
fl[1]
5e6*60
object.size(matrix(rnorm(100*10),nrow=100))
object.size(matrix(rnorm(200*10),nrow=100))
object.size(matrix(rnorm(200*10),nrow=200))
object.size(matrix(rnorm(400*10),nrow=400))
object.size(matrix(rnorm(1e5*60),nrow=1e5))
object.size(matrix(rnorm(1e5*60),nrow=1e5),units="Gb")
print(object.size(matrix(rnorm(1e5*60),nrow=1e5)),units="Gb")
print(object.size(matrix(rnorm(1e5*60),nrow=1e5)),units="Mb")
print(object.size(matrix(rnorm(1e6*60),nrow=1e6)),units="Mb")
print(object.size(matrix(rnorm(1e6*60),nrow=1e6)),units="Mb")*5
16*2.5
25e3*1e3
25e3*1e3/1e9
25e3*1e3/3e9
library(shiny)
?shiny
?runGithub
?runGitHub
require(PerformanceAnalytics)
library(devtools)
dev_mode()
getwd()
setwd("~/Dropbox/Jeff/code/github/2013/ballgown")
setwd("..")
document("ballgown")
setwd("ballgown")
document("ballgown")
source("http://bioconductor.org/biocLite.R")
biocLite("DESeq")
document("ballgown")
load_all("ballgown")
getwd()
setwd("~/Dropbox/Jeff/code/github/2013/ballgown")
document("ballgown")
load_all("ballgown")
ls(
)
?with_lib
